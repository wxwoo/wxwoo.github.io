<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P4315 月下“毛景树” 题解</title>
      <link href="/2019/09/09/solution-p4315/"/>
      <url>/2019/09/09/solution-p4315/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/P4315" target="_blank" rel="noopener">原题目链接</a></p><p>首先树剖边权转点权，把每一条边的权值下放到子节点上</p><p>在修改的时候注意最后要避开两个点的LCA，因为LCA的点权所代表的边权不在两个点的路径上</p><p>然后看见区间推平就想到了ODT</p><p>ODT比线段树短，好写，细节还比线段树少</p><p>但是不保证数据随机，ODT的时间复杂度没有保证</p><p><del>最后写出来跑了6s，被LCT和树剖+线段树吊打</del></p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch=getchar();</span><br><span class="line">T f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> setit set<span class="meta-string">&lt;node&gt;::iterator</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> val;</span><br><span class="line">node(<span class="keyword">int</span> L,<span class="keyword">int</span> R=<span class="number">-1</span>,<span class="keyword">int</span> V=<span class="number">0</span>):l(L),r(R),val(V)&#123;&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;s;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> u[N],v[N],head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],val[N&lt;&lt;<span class="number">1</span>],e;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++e]=v;</span><br><span class="line">val[e]=w;</span><br><span class="line">nxt[e]=head[u];</span><br><span class="line">head[u]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[N],son[N],dep[N],sz[N],w[N],top[N],id[N],seq[N],cnt;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> setit <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setit it=s.lower_bound(node(x));</span><br><span class="line"><span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==x)</span><br><span class="line"><span class="keyword">return</span> it;</span><br><span class="line">--it;</span><br><span class="line"><span class="keyword">int</span> l=it-&gt;l,r=it-&gt;r,val=it-&gt;val;</span><br><span class="line">s.erase(it);</span><br><span class="line">s.insert(node(l,x<span class="number">-1</span>,val));</span><br><span class="line"><span class="keyword">return</span> s.insert(node(x,r,val)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;l,<span class="keyword">const</span> <span class="keyword">int</span> &amp;r,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setit itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">s.erase(itl,itr);</span><br><span class="line">s.insert(node(l,r,k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;l,<span class="keyword">const</span> <span class="keyword">int</span> &amp;r,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setit itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line"><span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">itl-&gt;val+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;l,<span class="keyword">const</span> <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">setit itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line"><span class="keyword">for</span>(;itl!=itr;++itl)</span><br><span class="line">ans=max(ans,itl-&gt;val);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;f,<span class="keyword">const</span> <span class="keyword">int</span> &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[x]=f;</span><br><span class="line">dep[x]=d;</span><br><span class="line">sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==f)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs1(y,x,d+<span class="number">1</span>);</span><br><span class="line">w[y]=val[i];</span><br><span class="line">sz[x]+=sz[y];</span><br><span class="line"><span class="keyword">if</span>(sz[y]&gt;sz[son[x]])</span><br><span class="line">son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top[x]=t;</span><br><span class="line">id[x]=++cnt;</span><br><span class="line">seq[cnt]=x;</span><br><span class="line"><span class="keyword">if</span>(!son[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs2(son[x],t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==son[x]||y==fa[x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs2(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addchain</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">swap(x,y);</span><br><span class="line">add(id[top[x]],id[x],k);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">swap(x,y);</span><br><span class="line">add(id[x]+<span class="number">1</span>,id[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">covchain</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">swap(x,y);</span><br><span class="line">assign(id[top[x]],id[x],k);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">swap(x,y);</span><br><span class="line">assign(id[x]+<span class="number">1</span>,id[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">maxchain</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">swap(x,y);</span><br><span class="line">res=max(res,query(id[top[x]],id[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">swap(x,y);</span><br><span class="line"><span class="keyword">return</span> max(res,query(id[x]+<span class="number">1</span>,id[y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">updedge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[v]==u)</span><br><span class="line">swap(u,v);</span><br><span class="line">assign(id[u],id[u],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">read(u[i]);</span><br><span class="line">read(v[i]);</span><br><span class="line">read(w);</span><br><span class="line">addedge(u[i],v[i],w);</span><br><span class="line">addedge(v[i],u[i],w);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">s.insert(node(i,i,w[seq[i]]));</span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">1</span>]==<span class="string">'t'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">read(l);</span><br><span class="line">read(r);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">1</span>]==<span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxchain(l,r));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">1</span>]==<span class="string">'h'</span>)</span><br><span class="line">updedge(u[l],v[l],r);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">read(k);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">1</span>]==<span class="string">'o'</span>)</span><br><span class="line">covchain(l,r,k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">addchain(l,r,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> ODT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2136 拉近距离 题解</title>
      <link href="/2019/07/27/solution-p2136/"/>
      <url>/2019/07/27/solution-p2136/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/P2136" target="_blank" rel="noopener">原题目链接</a></p><p>此题显然为有向图判负权环板子题</p><p>没做过请先右转<a href="https://www.luogu.org/problemnew/show/P3385" target="_blank" rel="noopener">模板【负环】</a></p><p>此题关键点：</p><blockquote><p>小明和小红的生活中，有N个关键的节点。有M个事件，记为一个三元组（Si，Ti，Wi），表示从节点Si有一个事件可以转移到Ti，事件的效果就是使他们之间的距离<strong>减少</strong>Wi。</p></blockquote><p>所以建边时，要把权值变为相反数</p><p>然后以1为源点进行SPFA求负环，就AC了</p><p>……吗？</p><a id="more"></a><p>交上去一看，WA90！</p><p>此题最大关键点：</p><p>题目中没有说明是“小明向小红‘拉近距离’”还是“小红向小明‘拉近距离’”！</p><p><del>题目背景是小明说的，不代表小红观点，所以不算</del></p><p>所以我们还需要以n为源点进行SPFA求负环</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch=getchar();</span><br><span class="line">T f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],to[(N*<span class="number">10</span>)&lt;&lt;<span class="number">1</span>],nxt[(N*<span class="number">10</span>)&lt;&lt;<span class="number">1</span>],w[(N*<span class="number">10</span>)&lt;&lt;<span class="number">1</span>],e;</span><br><span class="line"><span class="keyword">int</span> ans[N],cnt[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++e]=v;</span><br><span class="line">w[e]=c;</span><br><span class="line">nxt[e]=head[u];</span><br><span class="line">head[u]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">ans[s]=<span class="number">0</span>;</span><br><span class="line">vis[s]=<span class="number">1</span>;</span><br><span class="line">q.push(s);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">if</span>(ans[y]&gt;ans[x]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">ans[y]=ans[x]+w[i];</span><br><span class="line">cnt[y]=cnt[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt[y]&gt;n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[y])</span><br><span class="line">&#123;</span><br><span class="line">vis[y]=<span class="number">1</span>;</span><br><span class="line">q.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line">read(m);</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">read(u);</span><br><span class="line">read(v);</span><br><span class="line">read(w);</span><br><span class="line">add(u,v,-w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(spfa(<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Forever love"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=ans[n];</span><br><span class="line"><span class="keyword">if</span>(spfa(n))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Forever love"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,min(res,ans[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负环 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4177 [CEOI2008]order 题解</title>
      <link href="/2019/07/10/solution-p4177/"/>
      <url>/2019/07/10/solution-p4177/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P4177" target="_blank" rel="noopener">原题目链接</a></p><p>先无视租机器，<del>明显的</del>最大权闭合子图</p><p>最大权闭合子图：</p><blockquote><p>给定一个有向图，点有点权，选择一个子图，满足子图上如果选择了一个点就必须选择它后继的所有点。最大化点权和。</p></blockquote><p>我们将机器和任务都看成一个点</p><p>如果这题没有租机器，这题的建边方式就应该是这样：</p><blockquote><ol><li><p>源点向订单连流量为利润的边</p></li><li><p>机器向汇点连流量为购买价格的边</p></li><li><p>每个订单向需要的机器连流量为inf的边</p></li></ol></blockquote><p>可以发现，源点连的边都是订单的利润，汇点连的边都是机器的成本，只有机器和订单之间的边是$inf$</p><p>对于每个订单需要的相同机器，租用的价格也不一样</p><p>所以我们考虑把$inf$换成租机器的费用</p><a id="more"></a><p>从正确性的角度考虑，跑最大流（最小割）是计算最优方案下的成本，若总租借费用低于购买机器费用，表示购买费用的那条边就不会满流，防止购买机器反而增加成本；反之表示购买费用的那条边就会满流，限制住成本因多次租用同一机器而增加</p><p>最终建边方式如下：</p><blockquote><ol><li><p>源点向订单连流量为利润的边</p></li><li><p>机器向汇点连流量为购买价格的边</p></li><li><p>每个订单向需要的机器连流量为租用费用的边</p></li></ol></blockquote><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch=getchar();</span><br><span class="line">    T f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>,N=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,nxt,cap,flow;</span><br><span class="line">&#125;e[N*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;u,<span class="keyword">const</span> <span class="keyword">int</span> &amp;v,<span class="keyword">const</span> <span class="keyword">int</span> &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,head[u],f,<span class="number">0</span>&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=sour;</span><br><span class="line">    l[sour]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[h++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!l[e[i].to]&amp;&amp;e[i].cap&gt;e[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++t]=e[i].to;</span><br><span class="line">                l[e[i].to]=l[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==sink)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==sink||!now)</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    <span class="keyword">int</span> t=now,detla;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;l[e[i].to]==l[x]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));</span><br><span class="line">            <span class="keyword">if</span>(!detla)</span><br><span class="line">                l[e[i].to]=<span class="number">0</span>;</span><br><span class="line">            e[i].flow+=detla;</span><br><span class="line">            e[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">            t-=detla;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(find())</span><br><span class="line">        ans+=dfs(sour,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    read(m);</span><br><span class="line">    sour=<span class="number">0</span>;</span><br><span class="line">    sink=n+m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> u,v,t,r,tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(v);</span><br><span class="line">        read(t);</span><br><span class="line">        add(sour,i,v);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            read(u);</span><br><span class="line">            read(r);</span><br><span class="line">            add(i,u+n,r);</span><br><span class="line">        &#125;</span><br><span class="line">        tot+=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(v);</span><br><span class="line">        add(i+n,sink,v);</span><br><span class="line">    &#125;</span><br><span class="line">    dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,tot-ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP1476 PROFIT - Maximum Profit 题解</title>
      <link href="/2019/06/15/solution-sp1476/"/>
      <url>/2019/06/15/solution-sp1476/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.spoj.com/problems/PROFIT/" target="_blank" rel="noopener">原题目链接</a></p><p><del>明显的</del>最大权闭合子图</p><p>最大权闭合子图：</p><blockquote><p>给定一个有向图，点有点权，选择一个子图，满足子图上如果选择了一个点就必须选择它后继的所有点。最大化点权和。</p></blockquote><p>经典的网络流问题，具体使用最小割求解</p><p>我们将顾客和通讯站都看成一个点，然后如下建边：</p><blockquote><ol><li><p>源点向顾客连流量为利润的边</p></li><li><p>通讯站向汇点连流量为成本的边</p></li><li><p>每个顾客向需要的通讯站连流量为inf的边</p></li></ol></blockquote><a id="more"></a><p>接下来我们思考这样建边的正确性</p><p>在最小割模型中，连一条流量为$inf$的边意为连一条不可割边</p><p>那么这个图中的可割边就只有顾客和通讯站了</p><p>跑最大流（最小割）即为计算最优方案下的成本</p><p>最终答案（最大净利润）为全部顾客能赚到的钱减去最小割</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e6</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,next,cap,flow;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,r,sour,sink,head[N],l[N],ans,q[N],p[N],tot;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i&lt;j?i:j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==sink||!now)</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">int</span> t=now,detla;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;l[e[i].to]==l[x]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));</span><br><span class="line"><span class="keyword">if</span>(!detla)</span><br><span class="line">l[e[i].to]=<span class="number">0</span>;</span><br><span class="line">e[i].flow+=detla;</span><br><span class="line">e[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">t-=detla;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> now-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt]=(edge)&#123;u,v,head[u],l,<span class="number">0</span>&#125;;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line"><span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>;</span><br><span class="line">q[<span class="number">1</span>]=sour;</span><br><span class="line">l[sour]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q[h++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line"><span class="keyword">if</span>(!l[e[i].to]&amp;&amp;e[i].cap&gt;e[i].flow)</span><br><span class="line">&#123;</span><br><span class="line">q[++t]=e[i].to;</span><br><span class="line">l[e[i].to]=l[x]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(e[i].to==sink)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(find())</span><br><span class="line">ans+=dfs(sour,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _;</span><br><span class="line">read(_);</span><br><span class="line">++_;</span><br><span class="line"><span class="keyword">while</span>(--_)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">read(n);</span><br><span class="line">read(m);</span><br><span class="line">sour=<span class="number">0</span>;</span><br><span class="line">sink=n+m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line">read(r);</span><br><span class="line">add(i+m,sink,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">read(a);</span><br><span class="line">read(b);</span><br><span class="line">read(c);</span><br><span class="line">add(i,a+m,inf);</span><br><span class="line">add(i,b+m,inf);</span><br><span class="line">add(sour,i,c);</span><br><span class="line">tot+=c;</span><br><span class="line">&#125;</span><br><span class="line">dinic();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tot-ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><del>双倍经验：<a href="https://www.luogu.org/problemnew/show/P4174" target="_blank" rel="noopener">P4174 [NOI2006]最大获利</a>，快去骗经验啊qwq</del></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> SPOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP2916 GSS5 - Can you answer these queries V 题解</title>
      <link href="/2019/06/14/solution-sp2916/"/>
      <url>/2019/06/14/solution-sp2916/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.spoj.com/problems/GSS5/" target="_blank" rel="noopener">原题目链接</a></p><p>前置知识：不带修区间最大子段和</p><p>没做过请先右转<a href="https://www.spoj.com/problems/GSS1/" target="_blank" rel="noopener">GSS1</a></p><p>这题比GSS1多了一个对左右端点的区间限制，GSS1的做法不再适用</p><p>这时我们就要分两种情况讨论</p><a id="more"></a><p>情况1：左右端点的区间不相交，即$[x_1,y_1]\cap[x_2,y_2]=\varnothing$</p><p>此时$[y_1+1,x_2-1]$为必选区间，我们只能最大化$[x_1,y_1]$的后缀和和$[x_2,y_2]$的前缀和，加上$[y_1+1,x_2-1]$的和即为答案</p><p>情况2：左右端点的区间相交<br>，即$[x_1,y_1]\cap[x_2,y_2]\ne\varnothing$</p><p>设最终答案区间左右端点分别为$x_{ans},y_{ans}$</p><p>此时答案分4种情况：</p><ol><li><p>$\{y_1,x_2\}\subsetneqq[x_{ans},y_{ans}]$</p></li><li><p>$\{y_1\}\subsetneqq[x_{ans},y_{ans}]$</p></li><li><p>$\{x_2\}\subsetneqq[x_{ans},y_{ans}]$</p></li><li><p>$\{y_1,x_2\}\nsubseteqq[x_{ans},y_{ans}]$</p></li></ol><p>情况1即为刚才讨论的左右端点区间不相交的情况</p><p>情况2可以最大化$[x_1,y_1]$的后缀和和$[y_1,y_2]$的前缀和求出</p><p>情况3可以最大化$[x_1,x_2]$的后缀和和$[x_2,y_2]$的前缀和求出</p><p>情况4即为求$[x_2,y_1]$的最大子段和</p><p>答案即为这4种情况中的最大值</p><p>不难发现，若情况1为最优，则情况1，2，3相等</p><p>所以情况1可以通过情况2或3来求出</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    T f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgttree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left,right,sum,ans;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(p) p&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(p) p&lt;&lt;1|1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> sgttree <span class="title">pushup</span><span class="params">(sgttree ls,sgttree rs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sgttree tmp;</span><br><span class="line">    tmp.sum=ls.sum+rs.sum;</span><br><span class="line">    tmp.left=max(ls.left,ls.sum+rs.left);</span><br><span class="line">    tmp.right=max(rs.right,rs.sum+ls.right);</span><br><span class="line">    tmp.ans=max(max(ls.ans,rs.ans),ls.right+rs.left);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        t[p].ans=t[p].sum=t[p].left=t[p].right=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(p),l,mid);</span><br><span class="line">    build(rs(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    t[p]=pushup(t[ls(p)],t[rs(p)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">sgttree <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&gt;qr)</span><br><span class="line">        <span class="keyword">return</span> (sgttree)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> query(ql,qr,l,mid,ls(p));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;ql)</span><br><span class="line">        <span class="keyword">return</span> query(ql,qr,mid+<span class="number">1</span>,r,rs(p));</span><br><span class="line">    sgttree ls,rs;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)</span><br><span class="line">        ls=query(ql,qr,l,mid,ls(p));</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;qr)</span><br><span class="line">        rs=query(ql,qr,mid+<span class="number">1</span>,r,rs(p));</span><br><span class="line">    <span class="keyword">return</span> pushup(ls,rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    read(_);</span><br><span class="line">    ++_;</span><br><span class="line">    <span class="keyword">while</span>(--_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        read(a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    read(m);</span><br><span class="line">    ++m;</span><br><span class="line">    <span class="keyword">int</span> ll,lr,rl,rr;</span><br><span class="line">    <span class="keyword">while</span>(--m)</span><br><span class="line">    &#123;</span><br><span class="line">        read(ll);</span><br><span class="line">        read(lr);</span><br><span class="line">        read(rl);</span><br><span class="line">        read(rr);</span><br><span class="line">        <span class="keyword">if</span>(lr&lt;rl)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(lr+<span class="number">1</span>,rl<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>).sum+query(ll,lr,<span class="number">1</span>,n,<span class="number">1</span>).right+query(rl,rr,<span class="number">1</span>,n,<span class="number">1</span>).left);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> res=query(rl,lr,<span class="number">1</span>,n,<span class="number">1</span>).ans;</span><br><span class="line">            <span class="keyword">if</span>(ll&lt;rl)</span><br><span class="line">                res=max(res,query(ll,rl,<span class="number">1</span>,n,<span class="number">1</span>).right+query(rl,rr,<span class="number">1</span>,n,<span class="number">1</span>).left-a[rl]);</span><br><span class="line">            <span class="keyword">if</span>(rr&gt;lr)</span><br><span class="line">                res=max(res,query(ll,lr,<span class="number">1</span>,n,<span class="number">1</span>).right+query(lr,rr,<span class="number">1</span>,n,<span class="number">1</span>).left-a[lr]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> SPOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP3978 DISQUERY - Distance Query 题解</title>
      <link href="/2019/05/27/solution-sp3978/"/>
      <url>/2019/05/27/solution-sp3978/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.spoj.com/problems/DISQUERY/" target="_blank" rel="noopener">原题目链接</a></p><p>树上链最值查询</p><p>做法很多，LCT，树上倍增，树剖都可以</p><p>但由于LCT常数过大，树上倍增比树剖常数大，这里使用树链剖分</p><p>边权转点权是树剖常用套路，将边权转成深度较大的点的点权，查询时注意避开两点的LCA的权值</p><p>由于不带修改，树剖后用ST表维护，时间复杂度$\mathcal{O}(n\log n)$，比用线段树维护$\mathcal{O}(n\log ^2n)$还少一个log</p><a id="more"></a><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line">T f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>,logN=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">1</span>],w[N&lt;&lt;<span class="number">1</span>],e;</span><br><span class="line"><span class="keyword">int</span> fa[N],son[N],dep[N],wt[N],sz[N],id[N],seq[N],top[N],cnt;</span><br><span class="line"><span class="keyword">int</span> st[N][logN][<span class="number">2</span>],_log[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++e]=v;</span><br><span class="line">w[e]=f;</span><br><span class="line">nxt[e]=head[u];</span><br><span class="line">head[u]=e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_log[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">st[i][<span class="number">0</span>][<span class="number">0</span>]=st[i][<span class="number">0</span>][<span class="number">1</span>]=wt[seq[i]];</span><br><span class="line">_log[i]=_log[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=logN;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">st[i][j][<span class="number">0</span>]=max(st[i][j<span class="number">-1</span>][<span class="number">0</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">st[i][j][<span class="number">1</span>]=min(st[i][j<span class="number">-1</span>][<span class="number">1</span>],st[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=_log[y-x+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> max(st[x][s][<span class="number">0</span>],st[y-(<span class="number">1</span>&lt;&lt;s)+<span class="number">1</span>][s][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qmin</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=_log[y-x+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> min(st[x][s][<span class="number">1</span>],st[y-(<span class="number">1</span>&lt;&lt;s)+<span class="number">1</span>][s][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[x]=f;</span><br><span class="line">dep[x]=d+<span class="number">1</span>;</span><br><span class="line">sz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==f)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">wt[y]=w[i];</span><br><span class="line">dfs1(y,x,d+<span class="number">1</span>);</span><br><span class="line">sz[x]+=sz[y];</span><br><span class="line"><span class="keyword">if</span>(sz[y]&gt;sz[son[x]])</span><br><span class="line">son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++cnt;</span><br><span class="line">top[x]=t;</span><br><span class="line">seq[cnt]=x;</span><br><span class="line"><span class="keyword">if</span>(!son[x])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">dfs2(son[x],t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=to[i];</span><br><span class="line"><span class="keyword">if</span>(y==fa[x]||y==son[x])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs2(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">querymin</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">swap(x,y);</span><br><span class="line">ans=min(ans,qmin(id[top[x]],id[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">swap(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">return</span> min(ans,qmin(id[x]+<span class="number">1</span>,id[y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">swap(x,y);</span><br><span class="line">ans=max(ans,qmax(id[top[x]],id[x]));</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">swap(x,y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">return</span> max(ans,qmax(id[x]+<span class="number">1</span>,id[y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">int</span> u,v,f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">read(u);</span><br><span class="line">read(v);</span><br><span class="line">read(f);</span><br><span class="line">add(u,v,f);</span><br><span class="line">add(v,u,f);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">build();</span><br><span class="line">read(m);</span><br><span class="line">++m;</span><br><span class="line"><span class="keyword">while</span>(--m)</span><br><span class="line">&#123;</span><br><span class="line">read(u);</span><br><span class="line">read(v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,querymin(u,v),querymax(u,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> SPOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中的mathjax数学公式渲染优化</title>
      <link href="/2019/05/15/hexo-mathjax-renderer-optimization/"/>
      <url>/2019/05/15/hexo-mathjax-renderer-optimization/</url>
      
        <content type="html"><![CDATA[<p>在使用hexo博客和material-x等博客主题时，难免会遇到mathjax数学公式渲染失败或者与markdown渲染冲突的问题。</p><p>xaoxuu给出了解决方案，只需在<code>_config.yml</code>里加入<code>mathjax: true</code>即可解决，可以解决大量的mathjax公式渲染，但仍有部分复杂的公式渲染出现问题。</p><p>我在这里给出一种解决方案。</p><p><em>注：部分资料来自互联网</em></p><a id="more"></a><h1 id="mathjax渲染修改"><a href="#mathjax渲染修改" class="headerlink" title="mathjax渲染修改"></a>mathjax渲染修改</h1><h2 id="1-修改渲染引擎"><a href="#1-修改渲染引擎" class="headerlink" title="1. 修改渲染引擎"></a>1. 修改渲染引擎</h2><p>更改hexo的默认渲染引擎，使其支持mathjax</p><p>打开cmd，cd到hexo博客文件夹下，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="2-更改配置"><a href="#2-更改配置" class="headerlink" title="2. 更改配置"></a>2. 更改配置</h2><p>找到<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，将<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule:  $$ + \1 + $$ </span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\ $(.*?)\$ `/g</span>, <span class="string">' $$$$$ 1 $$$$ '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-修改数学包"><a href="#3-修改数学包" class="headerlink" title="3. 修改数学包"></a>3. 修改数学包</h2><p>在cmd中输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure></p><h2 id="4-更新mathjax配置文件"><a href="#4-更新mathjax配置文件" class="headerlink" title="4. 更新mathjax配置文件"></a>4. 更新mathjax配置文件</h2><p>找到<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code>，将最下面那一行<code>&lt;script&gt;</code>注释掉，改成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-修改转义规则"><a href="#5-修改转义规则" class="headerlink" title="5. 修改转义规则"></a>5. 修改转义规则</h2><p>因为markdown和mathjax语法有冲突，我们修改转义规则以避免冲突</p><p>找到<code>\node_modules\kramed\lib\rules\inline.js</code>，将<code>escape</code>和<code>em</code>这两行注释掉，改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br><span class="line"></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><h2 id="6-开始使用"><a href="#6-开始使用" class="headerlink" title="6. 开始使用"></a>6. 开始使用</h2><p>找到<code>\_config.yml</code>，加上一行<code>mathjax: true</code>就可以了</p><h1 id="mathjax渲染优化"><a href="#mathjax渲染优化" class="headerlink" title="mathjax渲染优化"></a>mathjax渲染优化</h1><p>其实这应该就结束了</p><p>但不知什么原因，部分情况直接渲染出来会有一个灰色的框，十分难看</p><p>所以我们还要进行优化</p><p>打开<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code>，在<code>MathJax.Hub.Config</code>中加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extensions: [<span class="string">"tex2jax.js"</span>],</span><br><span class="line">jax: [<span class="string">"input/TeX"</span>, <span class="string">"output/HTML-CSS"</span>],</span><br></pre></td></tr></table></figure></p><p>将刚刚第4步修改的链接修改为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_HTMLCSS"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>就可以了</p><p>但是仍然有一些不尽人意的地方，比如：</p><h2 id="部分公式渲染出错"><a href="#部分公式渲染出错" class="headerlink" title="部分公式渲染出错"></a>部分公式渲染出错</h2><p>比如这个公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\dfrac&#123;1&#125;&#123;2&#125;$</span><br></pre></td></tr></table></figure></p><p>显示<code>Undefined control sequence \dfrac</code></p><p>不仅是这个，还有很多会出错，比如<code>\geqslant</code></p><p>这是由于更改链接后，缺少了<code>amsmath</code>包</p><p>在<code>MathJax.Hub.Config</code>中加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TeX: &#123; </span><br><span class="line">    equationNumbers: &#123; <span class="attr">autoNumber</span>: <span class="string">"AMS"</span> &#125;,</span><br><span class="line">    extensions: [<span class="string">"AMSmath.js"</span>, <span class="string">"AMSsymbols.js"</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>即可解决</p><h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><p>在<code>MathJax.Hub.Config</code>中加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"HTML-CSS"</span>: &#123;</span><br><span class="line">preferredFont: <span class="string">"TeX"</span>, </span><br><span class="line">    availableFonts: [<span class="string">"STIX"</span>,<span class="string">"TeX"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><del>其实这没什么用</del></p><h2 id="关闭右下角加载信息"><a href="#关闭右下角加载信息" class="headerlink" title="关闭右下角加载信息"></a>关闭右下角加载信息</h2><p>在<code>MathJax.Hub.Config</code>中加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">showProcessingMessages: <span class="literal">false</span>,</span><br><span class="line">messageStyle: <span class="string">"none"</span>,</span><br></pre></td></tr></table></figure></p><h2 id="关闭右键菜单"><a href="#关闭右键菜单" class="headerlink" title="关闭右键菜单"></a>关闭右键菜单</h2><p>在<code>&quot;HTML-CSS&quot;</code>中加上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showMathMenu: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><p>可以根据需要自行修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-mathjax-config"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    MathJax.Hub.Config(&#123;</span></span><br><span class="line"><span class="undefined">        TeX: &#123; </span></span><br><span class="line"><span class="javascript">            equationNumbers: &#123; <span class="attr">autoNumber</span>: <span class="string">"AMS"</span> &#125;,</span></span><br><span class="line"><span class="javascript">            extensions: [<span class="string">"AMSmath.js"</span>, <span class="string">"AMSsymbols.js"</span>]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="string">"HTML-CSS"</span>: &#123;</span></span><br><span class="line"><span class="javascript">            preferredFont: <span class="string">"TeX"</span>, </span></span><br><span class="line"><span class="javascript">            availableFonts: [<span class="string">"STIX"</span>, <span class="string">"TeX"</span>],</span></span><br><span class="line"><span class="javascript">            showMathMenu: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        showProcessingMessages: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">messageStyle: <span class="string">"none"</span>,</span></span><br><span class="line"><span class="javascript">        extensions: [<span class="string">"tex2jax.js"</span>],</span></span><br><span class="line"><span class="javascript">        jax: [<span class="string">"input/TeX"</span>, <span class="string">"output/HTML-CSS"</span>],</span></span><br><span class="line"><span class="undefined">        tex2jax: &#123; </span></span><br><span class="line"><span class="javascript">            inlineMath: [ [<span class="string">"$"</span>,<span class="string">"$"</span>] ],  </span></span><br><span class="line"><span class="javascript">            skipTags: [<span class="string">'script'</span>, <span class="string">'noscript'</span>, <span class="string">'style'</span>, <span class="string">'textarea'</span>, <span class="string">'pre'</span>, <span class="string">'code'</span>, <span class="string">'a'</span>]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    MathJax.Hub.Queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> all = MathJax.Hub.getAllJax();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all.length; ++i)</span></span><br><span class="line"><span class="javascript">            all[i].SourceElement().parentNode.className += <span class="string">' has-jax'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_HTMLCSS"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mathjax </tag>
            
            <tag> hexo </tag>
            
            <tag> material-x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1156A Inscribed Figures 题解</title>
      <link href="/2019/05/02/solution-cf1156a/"/>
      <url>/2019/05/02/solution-cf1156a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1156/A" target="_blank" rel="noopener">原题目链接</a></p><hr><p>PS：</p><p>这题比赛时当场出锅……</p><p>std被hack……</p><p>整场比赛最后unrated……</p><hr><p>对于每两个相邻的图形，交点数是固定的</p><p>也就是说我们可以打表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     1   2   3</span><br><span class="line">   </span><br><span class="line">1    /   3   4</span><br><span class="line">2    3   /  inf</span><br><span class="line">3    4  inf  /</span><br></pre></td></tr></table></figure><p>但是！直接打表是错误的！std就是这样被hack的！<br><a id="more"></a><br>考虑这样一组数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 1 2</span><br></pre></td></tr></table></figure><p>按照上面的那张表计算，答案是7</p><p>但是实际上，三角形，圆形，正方形共用了一个交点</p><p>所以答案是6</p><p>所以对于每组这样的情况，要进行特判</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line">T f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> res[<span class="number">4</span>][<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">                     <span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,</span><br><span class="line">                     <span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,inf,</span><br><span class="line">                     <span class="number">0</span>,<span class="number">4</span>,inf,<span class="number">0</span>,&#125;;<span class="comment">//打表</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">read(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans+=res[a[i<span class="number">-1</span>]][a[i]];<span class="comment">//计算交点数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>]==<span class="number">1</span>&amp;&amp;a[i<span class="number">-2</span>]==<span class="number">3</span>&amp;&amp;a[i]==<span class="number">2</span>)<span class="comment">//特判特殊情况</span></span><br><span class="line">--ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=inf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Infinite\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Finite\n"</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP1296 SUMFOUR - 4 values whose sum is 0 题解</title>
      <link href="/2019/04/23/solution-sp1296/"/>
      <url>/2019/04/23/solution-sp1296/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.spoj.com/problems/SUMFOUR/" target="_blank" rel="noopener">原题目链接</a></p><p>首先想到$\Theta(n^4)$的暴力枚举，但$n\le 4000$显然不行。</p><p>考虑先预处理出c数组和d数组的和，再暴力计算答案。</p><p>由于c数组和d数组的和可能会有重复，排序后使用二分来降低时间复杂度</p><p>最终时间复杂度$\Theta (n^2\log n)$</p><a id="more"></a><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4010</span>;</span><br><span class="line"><span class="keyword">int</span> n,nn,a[N],b[N],c[N],d[N],sum[N*N],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//降维，将二维转化成一维</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*n+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line">nn=n*n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">read(a[i]),read(b[i]),read(c[i]),read(d[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="comment">//预处理出c数组和d数组的和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">sum[calc(i,j)]=c[i]+d[j];</span><br><span class="line">&#125;</span><br><span class="line">sort(sum+<span class="number">1</span>,sum+nn+<span class="number">1</span>);<span class="comment">//排序，因为二分需要单调性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="comment">//暴力枚举a数组和b数组的和</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">&#123;</span><br><span class="line">ans+=upper_bound(sum+<span class="number">1</span>,sum+nn+<span class="number">1</span>,-a[i]-b[j])-lower_bound(sum+<span class="number">1</span>,sum+nn+<span class="number">1</span>,-a[i]-b[j]);<span class="comment">//二分计算有多少个重复答案</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> SPOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1791 [国家集训队]人员雇佣 题解</title>
      <link href="/2019/04/19/solution-p1791/"/>
      <url>/2019/04/19/solution-p1791/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1791" target="_blank" rel="noopener">原题目链接</a></p><p>选人有利润，选了要付出代价：<del>明显的</del>最小割模型</p><p>我们将每个人看成一个点，然后如下建边：</p><blockquote><ol><li><p>源点向每个人连流量为其总收益的边（即$\sum\limits_{j=1}^n E_{i,j}$）</p></li><li><p>每个人向汇点连流量为其花费的边</p></li><li><p>$i$向$j$连流量为$E_{i,j} \times 2$的边</p></li></ol></blockquote><a id="more"></a><p>接下来我们思考这样建边的正确性</p><p>前两条是经典的最小割模型</p><p>第三条，如果两个人都选，可以获得$E_{i,j}$的利润</p><p>如果有一个不选，会亏损$E_{i,j}$的利润</p><p>利润差为$E_{i,j} \times 2$</p><p>这样连边，一旦两个人中有一个人没选，这条边就会断掉，造成利润差</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    T f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,cap,flow;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i&lt;j?i:j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,head[u],l,<span class="number">0</span>&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=sour;</span><br><span class="line">    l[sour]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[h++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">            <span class="keyword">if</span>(!l[e[i].to]&amp;&amp;e[i].cap&gt;e[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++t]=e[i].to;</span><br><span class="line">                l[e[i].to]=l[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==sink)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==sink||!now)</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    <span class="keyword">int</span> t=now,detla;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;l[e[i].to]==l[x]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));</span><br><span class="line">            <span class="keyword">if</span>(!detla)</span><br><span class="line">                l[e[i].to]=<span class="number">0</span>;</span><br><span class="line">            e[i].flow+=detla;</span><br><span class="line">            e[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">            t-=detla;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(find())</span><br><span class="line">        ans+=dfs(sour,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    sour=<span class="number">0</span>;</span><br><span class="line">    sink=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> w,cost;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        read(w);</span><br><span class="line">        add(i,sink,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cost=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            read(w);</span><br><span class="line">            <span class="keyword">if</span>(w!=<span class="number">0</span>)<span class="comment">//优化：如果是0就不连边</span></span><br><span class="line">            &#123;</span><br><span class="line">                cost+=w;</span><br><span class="line">                add(i,j,w&lt;&lt;<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        add(sour,i,cost);</span><br><span class="line">        sum+=cost;</span><br><span class="line">    &#125;</span><br><span class="line">    dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum-ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3410 拍照 题解</title>
      <link href="/2019/03/25/solution-p3410/"/>
      <url>/2019/03/25/solution-p3410/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3410" target="_blank" rel="noopener">原题目链接</a></p><p>每张合影可选可不选，选了必须带一些特定人：<del>明显的</del>最大权闭合子图</p><p>最大权闭合子图：</p><blockquote><p>给定一个有向图，点有点权，选择一个子图，满足子图上如果选择了一个点就必须选择它后继的所有点。最大化点权和。</p></blockquote><p>经典的网络流问题，具体使用最小割求解。</p><a id="more"></a><p>根据<em>最大流最小割定理</em>，最大流=最小割，所以这题可以使用最大流算法求解</p><p>我们将合影和人都看成一个点，然后如下建边：</p><blockquote><ol><li><p>源点向合影连流量为利润的边</p></li><li><p>人向汇点连流量为花费的边</p></li><li><p>每个合影向需要的人连流量为inf的边</p></li></ol></blockquote><p>接下来我们思考这样建边的正确性</p><p>在最小割模型中，连一条流量为$inf$的边意为连一条不可割边</p><p>那么这个图中的可割边就只有合影和人了</p><p>跑最大流（最小割）即为计算最优方案下的花费</p><p>最终答案（最大净利润）为全部合影能赚到的钱减去最小割</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,cap,flow;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i&lt;j?i:j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,head[u],l,<span class="number">0</span>&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=sour;</span><br><span class="line">    l[sour]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[h++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">            <span class="keyword">if</span>(!l[e[i].to]&amp;&amp;e[i].cap&gt;e[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++t]=e[i].to;</span><br><span class="line">                l[e[i].to]=l[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==sink)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==sink||!now)</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    <span class="keyword">int</span> t=now,detla;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;l[e[i].to]==l[x]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));</span><br><span class="line">            <span class="keyword">if</span>(!detla)</span><br><span class="line">                l[e[i].to]=<span class="number">0</span>;</span><br><span class="line">            e[i].flow+=detla;</span><br><span class="line">            e[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">            t-=detla;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(find())</span><br><span class="line">        ans+=dfs(sour,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(m);</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    sour=<span class="number">0</span>;</span><br><span class="line">    sink=m+n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val,x;</span><br><span class="line">        read(val);</span><br><span class="line">        res+=val;<span class="comment">//计算总收益</span></span><br><span class="line">        add(sour,i,val);</span><br><span class="line">        read(x);</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i,x+m,inf);</span><br><span class="line">            read(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n+m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        read(val);</span><br><span class="line">        add(i,sink,val);</span><br><span class="line">    &#125;</span><br><span class="line">    dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res-ans);<span class="comment">//ans即为总花费</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><del>双倍经验：<a href="https://www.luogu.org/problemnew/show/P2762" target="_blank" rel="noopener">P2762 太空飞行计划问题</a>，快去骗经验啊qwq</del></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客食用指北</title>
      <link href="/2019/03/22/introduction/"/>
      <url>/2019/03/22/introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h1><p>链接请填写OJ账户（luogu优先），选填<br>邮箱用于验证和回复通知，必须填写<br>无法匿名评论<br>头像请用你的邮箱，到<a href="https://en.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>设置<br><strong>由于评论管理系统尚未部署完成（<del>其实就是咕咕咕了</del>），不一定会发送邮件</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P2598 [ZJOI2009]狼和羊的故事 题解</title>
      <link href="/2019/03/13/solution-p2598/"/>
      <url>/2019/03/13/solution-p2598/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2598" target="_blank" rel="noopener">原题目链接</a></p><p>将狼和羊分成两个部分：<del>明显的</del>最小割</p><p>根据<em>最大流最小割定理</em>，最大流=最小割，所以这题可以使用最大流算法求解</p><p>我们将每个格子看成一个点，然后如下建边：</p><blockquote><ol><li><p>源点向狼的领地连流量为$inf$的边</p></li><li><p>羊的领地向汇点连流量为$inf$的边</p></li><li><p>每个格子向上下左右四个格子连流量为$1$的边</p></li></ol></blockquote><a id="more"></a><p>接下来我们思考这样建边的正确性</p><p>在最小割模型中，连一条流量为$inf$的边意为连一条不可割边（这套路很常见的）</p><p>那么这个图中的可割边就只有两个格子之间的边了</p><p>接下来我们考虑那些为$0$的格子</p><p>由于最小割的性质，狼和羊一定会被分成两部分，和为$0$的格子无关</p><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,cap,flow;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> move[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i&lt;j?i:j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,head[u],l,<span class="number">0</span>&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">1</span>,t=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=sour;</span><br><span class="line">    l[sour]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[h++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">            <span class="keyword">if</span>(!l[e[i].to]&amp;&amp;e[i].cap&gt;e[i].flow)</span><br><span class="line">            &#123;</span><br><span class="line">                q[++t]=e[i].to;</span><br><span class="line">                l[e[i].to]=l[x]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(e[i].to==sink)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==sink||!now)</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    <span class="keyword">int</span> t=now,detla;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;l[e[i].to]==l[x]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));</span><br><span class="line">            <span class="keyword">if</span>(!detla)</span><br><span class="line">                l[e[i].to]=<span class="number">0</span>;</span><br><span class="line">            e[i].flow+=detla;</span><br><span class="line">            e[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">            t-=detla;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now-t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(find())</span><br><span class="line">        ans+=dfs(sour,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    read(m);</span><br><span class="line">    sour=<span class="number">0</span>;</span><br><span class="line">    sink=n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t;</span><br><span class="line">            read(t);</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">2</span>)</span><br><span class="line">            add(get(i,j),sink,inf);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">            add(sour,get(i,j),inf);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">int</span> x=i+move[k][<span class="number">0</span>],y=j+move[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;n||y&lt;<span class="number">1</span>||y&gt;m)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            add(get(i,j),get(x,y),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dinic();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SP733 MTWALK - Mountain Walking 题解</title>
      <link href="/2019/03/13/solution-sp733/"/>
      <url>/2019/03/13/solution-sp733/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.spoj.com/problems/MTWALK/" target="_blank" rel="noopener">原题目链接</a></p><p>看到题目就想到了<code>dfs+剪枝</code></p><p>然后就想到了<code>dfs</code>有问题</p><p>例如这组数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4-9-12</span><br><span class="line">| | |</span><br><span class="line">2-4-10</span><br></pre></td></tr></table></figure><p>从4开始，到10结束</p><p><code>dfs</code>会走$4 \to 2 \to 4 \to 10$，答案为8</p><p>然而很明显走$4 \to 9 \to 4 \to 10$更优，答案为6</p><p>当然你加一大堆玄学优化也是可以搜出正确答案的</p><p>这里不再多讲，而是提供另一种思路：</p><p><strong>二分</strong></p><a id="more"></a><p>$Q:$二分什么呢？</p><p>$A:$二分答案啊……这不是废话吗……</p><p>$Q:$我还不知道二分答案啊！关键是$check$函数怎么写！</p><p>$A:$这个时候我们就要祭出$dfs$大法了！</p><p><del>刚才还说dfs有问题现在就用</del></p><blockquote><ul><li><p>check函数循环最小值，最大值用最小值+答案计算出</p></li><li><p>对整张表dfs，标记数值在最小值到最大值区间内的格子</p></li><li><p>若目标点被标记，返回true，否则继续循环，直到循环结束，返回false</p></li></ul></blockquote><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>,move[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> m[N][N],n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[N][N];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line">T f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">const</span> <span class="keyword">int</span>&amp; sml,<span class="keyword">const</span> <span class="keyword">int</span>&amp; big)</span><span class="comment">//sml即为最小值，big即为最大值</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//dfs板子，不作过多解释</span></span><br><span class="line"><span class="keyword">if</span>(visit[x][y])</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">visit[x][y]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nx=x+move[i][<span class="number">0</span>],ny=y+move[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">1</span>||nx&gt;n||ny&lt;<span class="number">1</span>||ny&gt;n)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(m[nx][ny]&lt;sml||m[nx][ny]&gt;big)<span class="comment">//若不在最小值到最大值区间内，则continue</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs(nx,ny,sml,big);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//x即为要检验的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=max(<span class="number">0</span>,max(m[<span class="number">1</span>][<span class="number">1</span>],m[n][n])-x);i&lt;=min(<span class="number">110</span>-x,min(m[<span class="number">1</span>][<span class="number">1</span>],m[n][n]));i++)</span><br><span class="line">    <span class="comment">//最小值的初值：从起点和终点里取最大的（不然其中一个点必然不被标记），减去x，并且不为负数（和0取max）</span></span><br><span class="line">    <span class="comment">//退出循环判断：从起点和终点里取最小的（不然其中一个点必然不被标记），并和110-x取最小值（不然最大值就超出数据范围了），如果i大于这个值，则退出循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>,i,x+i);<span class="comment">//i为最小值，x+i为最大值</span></span><br><span class="line"><span class="keyword">if</span>(visit[n][n])<span class="comment">//如果终点被标记，则返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//若所有区间均尝试过仍没有返回，则返回false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">read(m[i][j]);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=N;<span class="comment">//二分模板</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))</span><br><span class="line">&#123;</span><br><span class="line">ans=mid;</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> SPOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF743A Vladik and flights 题解</title>
      <link href="/2019/03/13/solution-cf743a/"/>
      <url>/2019/03/13/solution-cf743a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/743/A" target="_blank" rel="noopener">原题目链接</a></p><p>写这题翻译的时候，突然就有了思路</p><p>实际上这题重在思考</p><p>若a机场和b机场是同一家公司，输出0，这个很容易想到</p><p>若a机场和b机场不是同一家公司，输出1，这是为什么呢？</p><a id="more"></a><p>首先，一定有两个不同公司的机场相邻</p><p>我们设这两个机场为$i$和$j$，且$i$与$a$同公司，$j$与$b$同公司</p><p>那么就有如下航线：</p><script type="math/tex; mode=display">a\to i\to j\to b</script><p>由于i与j相邻且不为同一家公司，所以总费用为1</p><p>代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span><span class="comment">//快读</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    T f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,a,b;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    read(a);</span><br><span class="line">    read(b);<span class="comment">//输入n,a,b</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c=getchar();</span><br><span class="line">        f[i]=c<span class="number">-48</span>;<span class="comment">//输入公司</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[a]==f[b])<span class="comment">//如果公司相同</span></span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'0'</span>);<span class="comment">//输出0</span></span><br><span class="line">    <span class="keyword">else</span><span class="comment">//如果公司不同</span></span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'1'</span>);<span class="comment">//输出1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1496 火烧赤壁 题解</title>
      <link href="/2019/03/13/solution-p1496/"/>
      <url>/2019/03/13/solution-p1496/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1496" target="_blank" rel="noopener">原题目链接</a></p><p>蒟蒻提供一个思路：</p><p>理论上，我们可以将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    ________</span><br><span class="line">   |   __   |</span><br><span class="line">   |  |  |  |</span><br><span class="line">----------------&gt;</span><br><span class="line">   2  5  9  11</span><br></pre></td></tr></table></figure></p><p>的重叠覆盖情况看成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    _____</span><br><span class="line">   |   __|__</span><br><span class="line">   |  |  |  |</span><br><span class="line">----------------&gt;</span><br><span class="line">   2  5  9  11</span><br></pre></td></tr></table></figure></p><p>所以，若我们将起点和终点按照从小到大的顺序排序，对答案不会产生影响<br><a id="more"></a><br>例如微调样例：</p><blockquote><p>3</p><p>-1 1</p><p>2 11</p><p>5 9</p></blockquote><p>和原样例答案一样，都可以看成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        __________</span><br><span class="line">    _  |    ______|__</span><br><span class="line">   | | |   |      |  |</span><br><span class="line">------------------------&gt;</span><br><span class="line">  -1 1 2   5      9  11</span><br></pre></td></tr></table></figure></p><p>所以，我们得到了一个解法：分别对起点和终点进行排序，循环加上每一条线段的长度，若与前一条线段重复减去重复部分</p><p>代码如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">20001</span>],b[<span class="number">20001</span>],l=<span class="number">0</span>;<span class="comment">//a数组存储起点，b数组存储终点，l表示最终长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i];<span class="comment">//输入</span></span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    sort(b,b+n);<span class="comment">//由于起点终点的顺序对答案不产生影响，对a数组和b数组进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l+=b[i]-a[i];<span class="comment">//加上当前线段长度</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n)<span class="comment">//如果这条线段不是最后一条线段</span></span><br><span class="line">            <span class="keyword">if</span>(b[i]&gt;a[i+<span class="number">1</span>])<span class="comment">//如果这条线段与前一条线段有重复</span></span><br><span class="line">                l-=b[i]-a[i+<span class="number">1</span>];<span class="comment">//减去重复部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;l;<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ps：蒟蒻不会离散化只能<del>xjb</del>模拟qwq</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3965 [TJOI2013]循环格 题解</title>
      <link href="/2019/03/13/solution-p3965/"/>
      <url>/2019/03/13/solution-p3965/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3965" target="_blank" rel="noopener">原题目链接</a></p><p><del>洛谷随机跳题跳到的</del></p><p>有指向，有修改，求最小：<del>明显的</del>最小费用最大流</p><p>我们将每个格子看成一个点，然后拆点，如下建边：</p><blockquote><ol><li><p>源点向每个点连边，流量为1，费用为0</p></li><li><p>每个点的拆点向汇点连边，流量为1，费用为0</p></li><li><p>每个点向四周的点连边，流量为1，默认指向费用为0，其他为1</p></li></ol></blockquote><a id="more"></a><p>下面我们思考这样建边的正确性</p><p>根据最小费用最大流的性质，一定会优先费用为0的边（也就是默认指向）</p><p>由于每条边流量都是1，所以不存在一个点有两个指向这种情况</p><blockquote><p>ps：3，4数据点疑似在Windows下生成，使用getchar()要注意对\r的判断</p></blockquote><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,next,cap,flow,cost;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> cnt,n,m,sour,sink,head[N],ans,cost,q[N],p[N],d[N],h,t;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> move[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> l,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;u,v,head[u],l,<span class="number">0</span>,f&#125;;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;v,u,head[v],<span class="number">0</span>,<span class="number">0</span>,-f&#125;;</span><br><span class="line">    head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">augment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> detla=inf,c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=sink;i!=sour;i=e[p[i]].from)</span><br><span class="line">    &#123;</span><br><span class="line">        detla=min(detla,e[p[i]].cap-e[p[i]].flow);</span><br><span class="line">        c+=e[p[i]].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=sink;i!=sour;i=e[p[i]].from)</span><br><span class="line">    &#123;</span><br><span class="line">        e[p[i]].flow+=detla;</span><br><span class="line">        e[((p[i]<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>].flow-=detla;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=detla;</span><br><span class="line">    cost+=detla*c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">127</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    vis[sour]=<span class="literal">true</span>;</span><br><span class="line">    d[sour]=<span class="number">0</span>;</span><br><span class="line">    q[h=t=<span class="number">1</span>]=sour;</span><br><span class="line">    <span class="keyword">while</span>(h&lt;=t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q[h++];</span><br><span class="line">        vis[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e[i].cap&gt;e[i].flow&amp;&amp;d[x]+e[i].cost&lt;d[e[i].to])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[e[i].to])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[e[i].to]=<span class="literal">true</span>;</span><br><span class="line">                    q[++t]=e[i].to;</span><br><span class="line">                &#125;</span><br><span class="line">                d[e[i].to]=d[x]+e[i].cost;</span><br><span class="line">                p[e[i].to]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[sink]&lt;inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(find())</span><br><span class="line">        augment();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">            f=<span class="number">-1</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">        ch=getchar();</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    read(m);</span><br><span class="line">    sour=<span class="number">0</span>;</span><br><span class="line">    sink=<span class="number">2</span>*n*m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">        <span class="keyword">int</span> dir;</span><br><span class="line">        add(sour,get(i,j),<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        add(get(i,j)+n*m,sink,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'U'</span>)</span><br><span class="line">        dir=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'D'</span>)</span><br><span class="line">        dir=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'L'</span>)</span><br><span class="line">        dir=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'R'</span>)</span><br><span class="line">        dir=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">int</span> x=i+move[k][<span class="number">0</span>],y=j+move[k][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x==n+<span class="number">1</span>)</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)</span><br><span class="line">        x=n;</span><br><span class="line">        <span class="keyword">if</span>(y==m+<span class="number">1</span>)</span><br><span class="line">        y=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y==<span class="number">0</span>)</span><br><span class="line">        y=m;</span><br><span class="line">        <span class="keyword">if</span>(dir==k)</span><br><span class="line">        add(get(i,j),get(x,y)+n*m,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        add(get(i,j),get(x,y)+n*m,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sap();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1108A Two distinct points 题解</title>
      <link href="/2019/03/13/solution-cf1108a/"/>
      <url>/2019/03/13/solution-cf1108a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1108/A" target="_blank" rel="noopener">原题目链接</a></p><p>我们可以取两条线段的中点，若重合就让第二条线段的中点+1</p><p>$Q:$中点+1后不在线段上怎么办？</p><p>$A:$由于C++整数除法自动省略小数，也就是向下取整，若线段长度大于1，那么中点+1后一定不会超出线段，若线段长度为1，即$l+1=r$，那么$\left\lfloor\dfrac{l+r}{2}\right\rfloor=l$，所以中点$+1=r$，也不会超出线段，所以中点+1后无论如何都在线段上，符合题意</p><a id="more"></a><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span><span class="comment">//快读，写不写无所谓</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">f=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(!(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>);</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line">read(q);<span class="comment">//读入q</span></span><br><span class="line"><span class="keyword">while</span>(q--)<span class="comment">//循环q次，可换成for(int i=1;i&lt;=q;i++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l1,r1,l2,r2;</span><br><span class="line">read(l1);</span><br><span class="line">read(r1);</span><br><span class="line">read(l2);</span><br><span class="line">read(r2);<span class="comment">//读入l1,r1,l2,r2</span></span><br><span class="line">        <span class="keyword">int</span> a=(l1+r1)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> b=(l2+r2)/<span class="number">2</span>;<span class="comment">//取两条线段的中点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,(a==b?b+<span class="number">1</span>:b));<span class="comment">//若相等，输出b+1，反之输出b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/12/hello-world/"/>
      <url>/2019/03/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
